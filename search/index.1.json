[{"authors":[],"categories":[{"title":"JavaScript","url":"/hugo-theme-bootstrap-skeleton/categories/javascript/"}],"content":"This article primarily introduces the JavaScript array Push, Unshift, Pop, and Shift methods, along with an example form for analyzing the JavaScript array Push, Unshift, Pop, and Shift methods for array addition, deletion, and other related operation skills.\nPush Method The Push method appends one or more elements to the end of the array and returns the array\u0026rsquo;s new length. The explanation demonstrates that the push method only needs to add the elements to the end of the array in sequence, without changing the index of the original array elements.\nArray.prototype._push = function (...value) { for (var i = 0; i \u0026lt; arguments.length; i++) { this[this.length] = arguments[i]; } return this.length; }; var arr = [1, 2, 3, 4]; arr._push(9, 8); console.log(arr); // [ 1, 2, 3, 4, 9, 8 ] Unshift Method (Header addition) The unshift method adds one or more elements to the beginning of the array and returns the new length of the array. The unshift method modifies the original array. When you use the unshift method to add elements to the array\u0026rsquo;s head, the length of the array changes, but unlike when you add elements to the tail, the original element index of the array does not change. The unshift method simply shifts the index of the original element to the right.\nFor example, to add just one element, you must shift the index of each array element to the right one by one. Assuming the initial array length is four, adding an element to the head increases the array length to five, and because it moves backward in sequence, its array[5-1] must now be the last element. So we can loop from the last element of the array to the next element, array[i] assign the value to the loop, array[i - 1] stop at 1, and assign the 0th item of the array to the value that needs to be added.\nArray.prototype._unshift = function (value) { for (let i = this.length; i \u0026gt; 0; i--) { this[i] = this[i - 1]; } this[0] = value; return this.length; }; var arr = [1, 2, 3, 4]; arr._unshift(8); console.log(arr); // [ 8, 1, 2, 3, 4 ] The above code only adds one element to the head, but the unshift method allows you to add multiple elements. E.G:\nvar arr = [1, 2, 3, 4]; arr.unshift(8, 7); console.log(arr); // [ 8, 7, 1, 2, 3, 4 ] In such a case, you should be aware of several parameters that have been entered. You can begin with the arguments object. The concept is as follows: first the loop is based on the length of the last generated array from back to front, moves the elements in the sequence, and then sequentially places the new elements at the head of the array.\nThe length of the new array is equal to the length of the original array plus the number of parameters. By looping from back to front and moving the final element of the original array to the final element of the new array, The starting point of the loop is the length of the original array plus the number of parameters. Because it is necessary to insert elements with the number of input parameters in the head. The endpoint of the loop is the number of input parameters. But since the index is always one element less than the length, the start and endpoints need to be decremented by one. Now you can write the logic of circular movement first.\nArray.prototype._unshift = function (...value) { for (var i = this.length + arguments.length - 1; i \u0026gt; arguments.length - 1; i--) { this[i] = this[i - arguments.length]; } }; In the previous step, the array head\u0026rsquo;s position has been vacated, and the second step is to insert new elements. So you only need to loop through the arguments now.\nfor (var k = 0; k \u0026lt; arguments.length; k++) { this[k] = arguments[k]; } The complete unshift method example:-\nArray.prototype._unshift = function(...value) { for (var i = (this.length + arguments.length - 1); i \u0026gt; arguments.length - 1; i--) { this[i] = this\\[i - arguments.length] } for(var k = 0; k \u0026lt; arguments.length; k++) { this[k] = arguments[k] } return this.length } var arr = [1, 2, 3, 4] arr._unshift(9, 8) console.log(arr); // [ 9, 8, 1, 2, 3, 4 ] Pop Method (Tail deletion) The pop method deletes the last element of the array object, shortens the array by one, and returns the value of the deleted element. If the array is already empty, pop returns an undefined value rather than changing it. The pop method first saves the last element of the array to facilitate the return, then deletes the last element of the array and sets it to null, and finally determines whether the array is empty. The pop method shortens the array by one element.\nArray.prototype._pop = function () { if (!this.length) { return undefined; } var end = this[this.length - 1]; this[this.length - 1] = null; this.length = this.length - 1; return end; }; var arr = [1, 2, 3, 4]; arr._pop(); console.log(arr); // [ 1, 2, 3 ] Shift Method The shift method is used to delete the first element of the array and return the value of the first element. The deletion of a header modifies the index of the original array element, causing the index of the elements that have not been deleted to shift to the left. The deleted element must first be recorded for easy return, and then the array\u0026rsquo;s first element is set to null. Finally, the shift method iterates through the array and changes the index for every element.\nArray.prototype._shift = function () { if (!this.length) { return undefined; } var start = this[0]; this[0] = null; for (var i = 0; i \u0026lt; this.length - 1; i++) { this[i] = this[i + 1]; } this.length = this.length - 1; return start; }; var arr = [1, 2, 3, 4]; arr._shift(); console.log(arr); // [ 2, 3, 4 ] ","date":"October 13, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/how-to-use-javascript-array-push-unshift-pop-and-shift-methods/","series":[],"smallImg":"","tags":[{"title":"JavaScript","url":"/hugo-theme-bootstrap-skeleton/tags/javascript/"}],"timestamp":1665599400,"title":"How to Use JavaScript Array Push, Unshift, Pop, and Shift Methods"},{"authors":[],"categories":[],"content":" Information that is gathered from visitors In common with other websites, log files are stored on the web server saving details such as the visitor\u0026rsquo;s IP address, browser type, referring page and time of visit.\nCookies may be used to remember visitor preferences when interacting with the website.\nWhere registration is required, the visitor\u0026rsquo;s email and a username will be stored on the server.\nHow the Information is used The information is used to enhance the vistor\u0026rsquo;s experience when using the website to display personalised content and possibly advertising.\nE-mail addresses will not be sold, rented or leased to 3rd parties.\nE-mail may be sent to inform you of news of our services or offers by us or our affiliates.\nVisitor Options If you have subscribed to one of our services, you may unsubscribe by following the instructions which are included in e-mail that you receive.\nYou may be able to block cookies via your browser settings but this may prevent you from access to certain features of the website.\nCookies Cookies are small digital signature files that are stored by your web browser that allow your preferences to be recorded when visiting the website. Also they may be used to track your return visits to the website.\n3rd party advertising companies may also use cookies for tracking purposes.\nGoogle Ads Google, as a third party vendor, uses cookies to serve ads.\nGoogle\u0026rsquo;s use of the DART cookie enables it to serve ads to visitors based on their visit to sites they visit on the Internet.\nWebsite visitors may opt out of the use of the DART cookie by visiting the Google ad and content network privacy policy.\n","date":"October 6, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/privacy-policy/","series":[],"smallImg":"","tags":[],"timestamp":1665037722,"title":"Privacy Policy"},{"authors":[],"categories":[{"title":"JavaScript","url":"/hugo-theme-bootstrap-skeleton/categories/javascript/"}],"content":"Ajax is an asynchronous JavaScript and XML mechanism for updating a portion of a page. It allows you to update a portion of the page after receiving data from the server, avoiding the need to refresh the entire page.\nFurthermore, by integrating partial page refreshes in this manner, we not only provide an excellent user experience but also reduce the server burden.\nA simple Ajax request var xmlhttp = new XMLHttpRequest(); xmlhttp.open(\u0026#39;GET\u0026#39;, \u0026#39;send-ajax-request-url\u0026#39;); xmlhttp.send(null); In this case, we first create an instance of a class that can send HTTP requests to the server. Then invoke its open method, passing the HTTP request method as the first parameter and the URL of the request page as the second. Finally, we invoke the send method with no parameters. If you use the POST request method, the send method parameters should contain any data you want to send.\nHere\u0026rsquo;s how we handle the server\u0026rsquo;s response xmlhttp.onreadystatechange = function () { if (xmlhttp.readyState !== 4) return; if (xmlhttp.status === 200) { console.log(\u0026#39;Request Response\u0026#39;, xmlhttp.responseText); } else { console.log(\u0026#39;HTTP error\u0026#39;, xmlhttp.status, xmlhttp.statusText); } }; Because onreadystatechange is asynchronous, it can be called at any time. This is known as a \u0026ldquo;callback function\u0026rdquo;, and it is called once the client starts sending a request.\nMany people rely on jQuery because of the Ajax method\u0026rsquo;s convenience. But JavaScript\u0026rsquo;s native Ajax API is also very powerful and has similar basic functionality across browsers, allowing you to completely encapsulate an Ajax object.\nAn example of a POST Ajax Request var xmlhttp; if (window.XMLHttpRequest) { xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject(\u0026#39;Microsoft.XMLHTTP\u0026#39;); } xmlhttp.open(\u0026#39;POST\u0026#39;, \u0026#39;send-ajax-request-url\u0026#39;, true); // set content type according to your data type xmlhttp.setRequestHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/json\u0026#39;); xmlhttp.setRequestHeader(\u0026#39;cache-control\u0026#39;, \u0026#39;no-cache\u0026#39;); // if data type is json use JSON stringify xmlhttp.send(JSON.stringify(data)); //set request timeout to handle any network error xmlhttp.timeout = 5000; xmlhttp.ontimeout = function () { console.log(\u0026#39;Request Timeout\u0026#39;, xmlhttp.responseURL); }; xmlhttp.onreadystatechange = function () { if (xmlhttp.readyState !== 4) return; if (xmlhttp.status === 200) { let response = \u0026#39;\u0026#39;; try { response = JSON.parse(xmlhttp.responseText); } catch (e) { response = xmlhttp.responseText; } console.log(\u0026#39;API Response\u0026#39;, response); } else { console.log(\u0026#39;HTTP error\u0026#39;, xmlhttp.status, xmlhttp.statusText); } }; An example of a GET Ajax Request var xmlhttp; if (window.XMLHttpRequest) { xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject(\u0026#39;Microsoft.XMLHTTP\u0026#39;); } xmlhttp.open(\u0026#39;GET\u0026#39;, \u0026#39;send-ajax-request-url\u0026#39;, true); xmlhttp.setRequestHeader(\u0026#39;cache-control\u0026#39;, \u0026#39;no-cache\u0026#39;); xmlhttp.send(); xmlhttp.onreadystatechange = function () { if (xmlhttp.readyState !== 4) return; if (xmlhttp.status == 200) { let response; try { response = JSON.parse(xmlhttp.responseText); } catch (e) { response = xmlhttp.responseText; } console.log(\u0026#39;Request Response\u0026#39;, response); } else { console.log(\u0026#39;HTTP error\u0026#39;, xmlhttp.status, xmlhttp.statusText); } }; This article primarily introduces examples to explain the method of using native JavaScript to process AJAX requests, so that friends who require it can refer to this article if the native API is used instead of the Ajax method in jQuery.\n","date":"October 6, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/how-to-send-get-and-post-ajax-api-requests-in-vanilla-javascript/","series":[],"smallImg":"","tags":[{"title":"JavaScript","url":"/hugo-theme-bootstrap-skeleton/tags/javascript/"},{"title":"Ajax","url":"/hugo-theme-bootstrap-skeleton/tags/ajax/"}],"timestamp":1664994600,"title":"How to Send GET and POST Ajax API Requests in Vanilla JavaScript"},{"authors":[],"categories":[],"content":"See also README.md.\n","date":"April 17, 2022","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/readme/","series":[],"smallImg":"","tags":[{"title":"README","url":"/hugo-theme-bootstrap-skeleton/tags/readme/"}],"timestamp":1650184529,"title":"README"},{"authors":[],"categories":[],"content":"Hi there, I\u0026rsquo;m XXX.\n","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/about/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"About Me"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Contact Me"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/hugo-theme-bootstrap-skeleton/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"}]
